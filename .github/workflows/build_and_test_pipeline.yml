name: Xcode - Build and Test

on:
  push:
    branches: [ "main", "Task/*" ]
  pull_request:
    branches: [ "main", ]

jobs:

  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode 16.1
        run: sudo xcode-select -s /Applications/Xcode_16.1.app

      - name: Install dependencies
        run: |
          xcodebuild -resolvePackageDependencies -project CI_test.xcodeproj

      - name: Build project
        run: |
          xcodebuild clean build \
            -project CI_test.xcodeproj \
            -scheme CI_test \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max' \
            CODE_SIGNING_ALLOWED=NO

      # --- RUN TESTS ---
      - name: Run tests
        run: |
          # This command executes the test action defined in your scheme.
          # The job will fail if any of your tests fail.
          xcodebuild test \
            -project CI_test.xcodeproj \
            -scheme CI_test \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max' \
            CODE_SIGNING_ALLOWED=NO

      - name: Notify Telegram
        if: always() # Important: This runs the step even if the build fails
        run: |
          STATUS="‚úÖ Build succeeded"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="‚ùå Build failed"
          fi
          
          MESSAGE="${STATUS}%0Aüì¶ Repo: $GITHUB_REPOSITORY%0Aüåø Branch: $GITHUB_REF_NAME%0Aüîó [View build]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=Markdown \
            -d text="${MESSAGE}"
